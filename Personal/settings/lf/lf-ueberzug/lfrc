# interpreter for shell commands
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

####################################################################################################
##################### Basic Settings
####################################################################################################

set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/cleaner
set mouse
set hidden true
set ignorecase true
set icons true

####################################################################################################
##################### Custom Functions
####################################################################################################

##################### exa

cmd on-select &{{
    lf -remote "send $id set statfmt \"$(exa -ld --color=always "$f")\""
}}

##################### define a custom 'open' command

cmd open $$OPENER $fx
cmd open-choose $OPENER_CHOOSE="true" $OPENER $fx
map o open
map O $mimeopen --ask $f

##################### execute current file (must be executable)

map x $$f
map X !$f

##################### Make a directory

# cmd mkdir ${{
#   printf "Directory Name: "
#   read ans
#   mkdir $ans
# }}
# 
# map ad mkdir

map <a-d> :push %mkdir<space>

##################### Make a file

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

map <a-f> mkfile

##################### Extract

cmd extract ${{
    set -f
    atool -x $f
}}

map <a-e> extract

##################### Unarchive

cmd unarchive ${{
  set -f
  case "$f" in
      *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
      *.tar.gz|*.tgz) tar xzvf $f;;
      *.tar.xz|*.txz) tar xJvf $f;;
      *.tar) tar -xvf "$f" ;;
      *.rar) unrar x $f;;
      *.zip) unzip "$f" ;;
      *.7z) 7z x $f;;
      *) echo "Unsupported format" ;;
  esac
}}

map <a-u> unarchive

##################### compress current file or selected files with tar and gunzip

cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

##################### compress current file or selected files with zip

cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

##################### Delete

cmd delete ${{
   set -f
   printf "$fx\n"
   printf "delete?[y/n]"
   read ans
   [ "$ans" = "y" ] && rm -rf $fx
}}

map <s-delete> delete

##################### Trash

cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    trash-put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

map <delete> trash

##################### Restore Trash

cmd restore_trash ${{
  trash-restore
}}

map <a-r> restore_trash

####################################################################################################
##################### Key Bindings
####################################################################################################

map <enter> open
map c clear
map f find
map r rename

map <backspace> set hidden!     # backspace = ctrl+h
map <c-c> copy
map <c-v> paste
map <c-x> cut
map <c-r> reload

map gd cd ~/Downloads
map gc cd ~/.config

####################################################################################################
